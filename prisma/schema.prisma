// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ************************
//    USER AUTHENTICATION
// ************************

model Session {
  id String @id @default(uuid())

  token String? @unique // A jwt, stored in the browser's cookies to identify a user.

  user      User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String?
  last_used DateTime @default(now())
}

model Key {
  id String @id @unique @default(uuid())

  hashed_password String?
  token           OauthToken?
  salt            String?     @default(uuid())

  pretty_name String?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String
}

// ************************
//        USER DATA
// ************************

model User {
  id              String  @id @default(uuid())
  email           String?
  username        String?
  avatar_url      String?
  colortheme      String?
  highlight_color String?

  charts Chart[]
  posts  Post[]
  drives Drive[]

  sessions Session[]
  keys     Key[]

  transfer_code       String?
  has_picked_username Boolean @default(false)

  links_in_process LoginProcess[]

  @@unique([id, username])
}

model OauthToken {
  access_token  String
  token_type    String
  expires_at    DateTime @default(now())
  refresh_token String
  scope         String

  key    Key    @relation(fields: [key_id], references: [id], onDelete: Cascade)
  key_id String @id @unique
}

model LoginProcess {
  id   String @id @unique // Used as the state in Oauth procedures
  href String // The page which the user starts the login request

  linked_to    User?   @relation(fields: [linked_to_id], references: [id])
  linked_to_id String?
}

model Drive {
  id       String  @id @default(uuid())
  drive_id String? @unique

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  charts Chart[]
}

// ************************
//       CHART DATA
// ************************

model Chart {
  id String @id @default(uuid())

  // Core Info
  name         String   @default("Unknown Title")
  artist       String   @default("Unknown Artist")
  charter      String   @default("Unknown Charter")
  last_updated DateTime @default(now())
  date_added   DateTime @default(now())
  status       String   @default("WIP")
  visibility   Int      @default(1) // 0: Public, 1: Unlisted, 2: Private

  // Additional Metadata
  album              String @default("Unknown Album")
  genre              String @default("Unknown Genre")
  year               String @default("Unknown Year")
  song_length        Int    @default(0)
  preview_start_time Int    @default(0)
  loading_phrase     String @default("")
  icon               String @default("0")
  modchart           Int    @default(0)
  album_track        Int    @default(16000)
  playlist_track     Int    @default(16000)
  download_count     Int    @default(0)
  tags               String @default("")

  // Difficulties
  diff_band            Int @default(-1)
  diff_guitar          Int @default(-1)
  diff_bass            Int @default(-1)
  diff_rhythm          Int @default(-1)
  diff_drums           Int @default(-1)
  diff_keys            Int @default(-1)
  diff_guitarghl       Int @default(-1)
  diff_bassghl         Int @default(-1)
  diff_rhythm_ghl      Int @default(-1)
  diff_drums_real      Int @default(-1)
  diff_guitar_coop_ghl Int @default(-1)
  diff_guitar_coop     Int @default(-1)

  // TBH IDK, but it's in every song.ini
  pro_drums       Int @default(0)
  five_lane_drums Int @default(0)
  end_events      Int @default(0)
  count           Int @default(0)
  frets           Int @default(0)

  // Files
  song_url       String  @default("")
  chart_url      String  @default("")
  album_url      String  @default("")
  background_url String?
  icon_url       String?

  audio_type      String  @default("ogg")
  album_type      String  @default("png")
  background_type String?
  icon_type       String?

  user     User?   @relation(fields: [user_id, username], references: [id, username])
  username String?
  user_id  String?

  in_drive Drive?  @relation(fields: [drive_id], references: [id])
  drive_id String?

  posts Post[]
}

model Post {
  id String @id @default(uuid())

  content String

  chart    Chart?  @relation(fields: [chart_id], references: [id])
  chart_id String?

  author      User     @relation(fields: [user_id], references: [id])
  user_id     String
  date_posted DateTime
  time_code   Int?

  replies PostReplies? @relation(name: "parent")

  reply_to    PostReplies? @relation(fields: [reply_to_id], references: [parent_id])
  reply_to_id String?
}

model PostReplies {
  parent    Post   @relation(name: "parent", fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String @id @unique

  replies Post[]
}
